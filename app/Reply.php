<?php

namespace App;

use App\Constants\Reputation;
use App\Traits\RecordActivity;
use App\Traits\SanitizeBody;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;

class Reply extends Model
{
    use RecordActivity, SanitizeBody;

    protected $fillable = ['user_id', 'body'];

    protected $withCount = ['favorites'];

    protected $appends = ['isFavorited', 'replyAnchor', 'isBest'];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::deleting(function ($model) {
            $model->favorites->each->delete();
            $model->thread->decrement('replies_count');
        });

        static::addGlobalScope('owner', function ($query) {
            $query->with('owner');
        });

        static::created(function ($model) {
            $model->thread->increment('replies_count');

            Reputation::award($model->owner, Reputation::REPLY_POSTED);
        });
    }

    public function owner()
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    public function thread()
    {
        return $this->belongsTo(Thread::class);
    }

    public function path()
    {
        return "{$this->thread->path()}#{$this->replyId()}";
    }

    public function replyId()
    {
        return "reply-{$this->id}";
    }

    public function wasAddedRecently()
    {
        return $this->created_at->gt(Carbon::now()->subMinute());
    }

    public function getReplyAnchorAttribute()
    {
        return $this->replyId();
    }

    public function favorited()
    {
        $arguments = ['user_id' => auth()->id()];

        if (!$this->favorites()->where($arguments)->exists())
        {
            $this->favorites()->create($arguments);

            Reputation::award($this->owner, Reputation::REPLY_MARKED_AS_FAVORITE);
        }
    }

    public function favorites()
    {
        return $this->morphMany(Favorite::class, 'favoriteable');
    }

    public function setBodyAttribute($body)
    {
        $this->attributes['body'] = preg_replace(
            '/@([\w\-]+)/',
            '<a href="/profiles/$1">$0</a>',
            $body
        );
    }

    public function unFavorited()
    {
        $arguments = ['user_id' => auth()->id()];

        $this->favorites()->get()->each->delete($arguments);
    }

    public function getIsFavoritedAttribute()
    {
        return $this->isFavorited();
    }

    public function isFavorited()
    {
        return !!$this->favorites()->where('user_id', auth()->id())->count();
    }

    public function mentionedUsers()
    {
        preg_match_all('/\@([\w\-]+)/', $this->body, $matches);

        return array_pop($matches);
    }

    public function isBest()
    {
        return $this->id === (int) $this->thread->best_reply_id;
    }

    public function getIsBestAttribute()
    {
        return $this->isBest();
    }
}
